#!/usr/bin/env python
import argparse
import os
from pathlib import Path # Import Path
from ray import tune, air
from ray.tune.search.optuna import OptunaSearch
from ray.tune.schedulers import ASHAScheduler

from mmengine.config import Config
from hod.hpo import config_to_param_space, train_trial
import pprint

# Determine project root (assuming this script is in tools/ directory)
PROJECT_ROOT = Path(__file__).resolve().parent.parent

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--cfg", required=True,
                        help="Base MMEngine config path (relative to project root)")
    parser.add_argument("--num-samples", type=int, default=40,
                        help="Number of Ray Tune trials")
    parser.add_argument("--gpus-per-trial", type=float, default=1)
    args = parser.parse_args()

    # Resolve the config path to an absolute path from the project root
    # This assumes tune.py is run from the project root, and args.cfg is like "configs/tune/X.py"
    abs_cfg_path = PROJECT_ROOT / args.cfg
    if not abs_cfg_path.exists():
        print(f"ERROR: Config file not found at {abs_cfg_path}. Ensure tools/tune.py is run from the project root and the path is correct.")
        return
    
    print(f"DEBUG: tools/tune.py: Attempting to load base config for param_space from: {abs_cfg_path}") # Add this line
    base_cfg = Config.fromfile(str(abs_cfg_path))
    param_space = config_to_param_space(base_cfg)

    print("DEBUG: param_space generated by config_to_param_space:")
    pprint.pprint(param_space)

    tuner = tune.Tuner(
        tune.with_resources(
            tune.with_parameters(train_trial,
                                 cfg_path=str(abs_cfg_path), # Pass absolute path string
                                 project_root_dir=str(PROJECT_ROOT)), # Pass project root string
            resources={"gpu": args.gpus_per_trial, "cpu": 4}),
        param_space=param_space,
        tune_config=tune.TuneConfig(
            num_samples=args.num_samples,
            search_alg=OptunaSearch(metric="mAP", mode="max", seed=0), # Ensure Optuna metric matches reported metric
            scheduler=ASHAScheduler(metric="mAP", mode="max")),
        run_config=air.RunConfig(
            name="hod_optuna_asha",
            storage_path=str(PROJECT_ROOT / "work_dirs" / "ray_results")) # Make storage_path absolute from project_root
    )
    tuner.fit()


if __name__ == "__main__":
    main()